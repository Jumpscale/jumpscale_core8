#!/usr/bin/env jspython

# Click library has some problems with python3 when it comes to unicode: http://click.pocoo.org/5/python3/#python3-surrogates
# to fix this we need to set the environ variables to export the locales

import os
from JumpScale import j
import click

os.environ['LC_ALL'] = 'C.UTF-8'
os.environ['LANG'] = 'C.UTF-8'

repo = None


@click.group()
def cli():
    pass


@click.command()
@click.option('--ask', default=True, is_flag=True, help='ask before confirmation before executing')
@click.option('--force', default=False, is_flag=True, help='force execution even if no change')
@click.option('--debug', default=False, is_flag=True, help='enable debug in jobs')
@click.option('--profile', default=False, is_flag=True, help='enable profiling of the jobs')
def run(ask, force, debug, profile):
    """
    Look for all action with a state 'schedule', 'changed' or 'error' and create a run.
    A run is an collection of actions that will be run on the repository.
    """
    repo = j.atyourservice.get()
    print("Compute dependency graph...")
    run = repo.runCreate(debug=debug, profile=profile)

    if len(run.steps) <= 0:
        print("Nothing to do.")
        return
    else:
        print(run)

    if ask:
        resp = j.tools.console.askYesNo('Do you want to execute this run ?')
        if resp is False:
            return

    run.execute()


@click.command()
@click.option('--path', '-p', default=None, help='path of the new AYS repo you want to create')
@click.option('--git', '-g', default=None, help='URL of the git repository to attach to this AYS repository')
def create_repo(path, git):
    """
    create a new AYS repository
    """
    if git is None:
        print("you have to specify an gi repository using --git")
        return

    if path is None:
        path = j.sal.fs.getcwd()

    j.atyourservice.repoCreate(path=path, git_url=git)


@click.command()
@click.option('--path', '-p', default=None, help='Path where to start looking for AYS repository')
def discover(path=None):
    """
    Discover AYS repository on the filesystem and save them in DB.
    """
    if path is None:
        path = j.sal.fs.getcwd()
    repos = j.atyourservice.reposDiscover(path)

    print('Repositories discovered: ')
    if len(repos) > 0:
        for repo in repos:
            print(repo.path)
    else:
        print('None')


@click.command()
def repo_list():
    """
    List all known repositories
    """
    print("AYS Repositories: ")
    repos = j.atyourservice.reposList()
    for repo in sorted(repos):
        print(repo.path)


@click.command()
@click.option('--name', '-n', default=None, help='name of the actor to update')
def update(name):
    """
    Update actor to a new version.
    Any change detected in the actor will be propagated to the services and processChange method will be
    called all the way from actor to service instances.
    """
    repo = j.atyourservice.get()
    names = []
    if name is None:
        names = repo.templates.keys()
    else:
        names = [name]

    for n in names:
        template = repo.templateGet(name=n)
        try:
            actor = repo.actorGet(name=n)
        except:
            import ipdb
            ipdb.set_trace()

        actor._initFromTemplate(template)


@click.command()
@click.argument('path', default='')
@click.option('--role', '-r', default="", help='optional role for ays instances to init')
@click.option('--instance', '-i', default="", help='optional name of instance')
def blueprint(path, role, instance):
    """
    will process the blueprint(s) pointed to

    it path is directory then all blueprints in directory will be processed (when not starting with _)
    if is file than only that 1 file

    if path=="" then blueprints found in $aysdir/blueprints will be processed

    if role & instance specified then only the ays instances with specified role/instance will be processed
    """
    repo = j.atyourservice.get()
    repo.blueprintExecute(role=role, instance=instance, path=path)

def _do(action, role, instance, force, producerroles, args, ask, debug, profile):
    repo = j.atyourservice.get()
    data = {}
    if args is not None:
        if j.sal.fs.exists(args):
            # args is the path to a file
            ext = j.sal.fs.getFileExtension(args)
            if ext in ['yaml', 'yml']:
                data = j.data.serializer.yaml.load(args)
            elif ext in ['toml']:
                data = j.data.serializer.toml.load(args)
            else:
                data = j.data.serializer.json.load(args)
        else:
            obj = j.data.tags.getObject(tagstring=args)
            data = obj.getDict()

    for service in repo.servicesFind(actor="%s.*" % role, name=instance):
        service.scheduleAction(action=action, period=None, log=True, force=force)

    run = repo.runCreate(profile=profile, debug=debug)
    if len(run.steps) <= 0:
        print("Nothing to do.")
        return
    else:
        print(run)
    if ask:
        resp = j.tools.console.askYesNo('Do you want to execute this run ?')
        if resp is False:
            return
    run.execute()


@click.command()
@click.argument('action')
@click.option('--role', '-r', default="", help='optional role for ays instances execute an action on')
@click.option('--instance', '-i', default="", help='optional name of instance')
@click.option('--force', default=False, is_flag=True, help='force execution even if no change')
@click.option('--producerroles', '-p', default="*", help='roles of producers which will be taken into consideration, if * all')
@click.option('--args', default=None, help='argument to pass to the run. Can be a list of tags e.g: "key:value key:value" \
or a path to a file containing the argument. Format of the file can be json, yaml, toml. format is detected using file extension. default format is json')
@click.option('--ask', default=True, is_flag=True, help='ask before confirmation before executing')
@click.option('--debug', default=False, is_flag=True, help='enable debug in jobs')
@click.option('--profile', default=False, is_flag=True, help='enable profiling of the jobs')
def do(action, role, instance, force, producerroles, args, ask, debug, profile):
    """
    Schedule an action then immediatly create a run.
    This is a shortcut from sending a blueprint with an actions block and the do `ays run`
    """
    _do(action=action, role=role, instance=instance, force=force, producerroles=producerroles, ask=ask, debug=debug, profile=profile, args=args, no_exec=no_exec)


@click.command()
@click.option('--role', '-r', default="", help='optional role for ays instances execute an action on')
@click.option('--instance', '-i', default="", help='optional name of instance')
@click.option('--force', default=False, is_flag=True, help='if True then will ignore state of service action.')
@click.option('--producerroles', '-p', default="*", help='roles of producers which will be taken into consideration, if * all')
@click.option('--args', default=None, help='argument to pass to the run. Can be a list of tags e.g: "key:value key:value" \
or a path to a file containing the argument. Format of the file can be json, yaml, toml. format is detected using file extension. default format is json')
@click.option('--ask', default=True, is_flag=True, help='ask before confirmation before executing')
@click.option('--debug', default=False, is_flag=True, help='enable debug in jobs')
@click.option('--profile', default=False, is_flag=True, help='enable profiling of the jobs')
def install(role, instance, force, producerroles, ask, args, debug, profile):
    """
    alias for 'ays do install'
    make it reality
    if you want more finegrained controle please use the do cmd
    """
    _do(action='install', role=role, instance=instance, force=force, producerroles=producerroles, ask=ask, debug=debug, profile=profile, args=args)


@click.command()
@click.option('--role', '-r', default="", help='optional role for ays instances execute an action on')
@click.option('--instance', '-i', default="", help='optional name of instance')
def simulate(role="", instance=""):
    """
    is like do only does not execute it,
    is ideal to figure out what would happen if you run a certain action
    """
    repo = j.atyourservice.get()
    run = repo.runCreate(profile=False, debug=False)
    if len(run.steps) <= 0:
        print("Nothing to do.")
        return

    print(run)


@click.command()
@click.argument('action')
@click.option('--state', default="ok", help='state to set, can be: new, ok, scheduled')
@click.option('--role', default="", help='optional role for ays instances execute an action on')
@click.option('--instance', default="", help='optional name of the service')
def set_state(action, state, role, instance):
    """
    Manually set the state of an action.
    You can filter on which services to apply the state using --role and --instance
    Only use this command if you know what you're doing !!
    """

    if state not in ['ok', 'new', 'scheduled']:
        print("State {} not supported.".format(state))
        return

    repo = j.atyourservice.get()
    services = repo.servicesFind(name=instance, actor='{}.*'.format(role))
    for service in services:
        if action in service.model.actions:
            print('setting state of action {action} from service {service} to {state}'.format(state=state, action=action, service=service))
            service.model.actions[action].state = state
        service.saveAll()

@click.command()
@click.option('--role', '-r', default='')
@click.option('--instance', '-i', default='')
@click.option('--deep', default=False, is_flag=True, help='show producers and consumers recursivlely')
def show(role, instance, deep):
    '''
    show information about a service
    '''
    def print_date(epoch):
        if epoch == 0:
            return "never"
        return j.data.time.epoch2HRDateTime(epoch)

    repo = j.atyourservice.get()
    services = repo.servicesFind(actor="%s.*" % role, name=instance)
    for service in services:
        print('\n')
        print('---------------------------------------------------')
        print("Service: %s - Actor: %s" % (service.model.dbobj.name, service.model.dbobj.actorName))
        print("\nInstance data:")
        instance_data = service.model.data.to_dict()
        for k in sorted(instance_data):
            print("- %s : %s" % (k, instance_data[k]))

        if service.parent is not None:
            print("\nParent:")
            print(service.parent)

        print("\nProducers:")
        if deep:
            service.printProducersRecursive()
        else:
            for producer in service.producers:
                print(producer)

        print("\nRecurring actions:")
        for name, model in service.model.actionsRecurring.items():
            print("%s: period:%5s lastRun:%s " % (name, j.data.time.getSecondsInHR(model.period), print_date(model.lastRun)))

        print("\nEvent filters:")
        for event_filter in service.model.eventFilters:
            print('- action: %s' % event_filter.action)
            print('  command: %s' % event_filter.command)
            print('  channel: %s' % event_filter.channel)
            print('  tags: %s' % event_filter.tags)
            print('  secrets: not shown')

@click.command()
@click.option('--role', '-r', default='')
@click.option('--instance', '-i', default='')
def list(role, instance):
    """
    The list command lists all service instances with specific role and instance name.
    """
    repo = j.atyourservice.get()
    print("Installed services:")
    print("-------------------")
    services = repo.servicesFind(actor="%s.*" % role, name=instance)
    for s in sorted(services, key=lambda service: service.model.role):
        print("%s!%s" % (s.model.role, s.model.dbobj.name))


@click.command()
def destroy():
    """
    reset in current ays repo all services & recipe's in current repo (DANGEROUS)
    all instances will be lost !!!

    make sure to do a commit before you do a distroy, this will give you a chance to roll back.
    """
    repo = j.atyourservice.get()
    repo.destroy()


@click.command()
@click.argument('cmd', default='doall')
@click.option('--name', '-n', help="Name of test.", default='fake_IT_env')
@click.option('--message', '-m', help="Message as used in e.g. pull/push.", default='unknown')
def test(cmd, name, message):
    """
    there is a test suite for ays, this command allows to control the test suite

    cmds are
     - doall : execute all tests
     - push : push modified tests to the repo
     - pull : get the repo with the tests
    """
    repo = j.atyourservice.get()
    tester = j.repo.getTester(name)
    if cmd == "doall":
        tester.doall()
    elif cmd == "push":
        tester.gitpush(message=message)
    elif cmd == "pull":
        tester.gitpull(message=message)


@click.command()
@click.option('--branch', '-b', help="Name of branch, can be used in commit/push request to do change mgmt.", default='master')
@click.option('--message', '-m', help="Message as used in e.g. pull/push.", default='')
@click.option('--push', '-p', default=False, is_flag=True, help='if True then will push changes to git repo.')
def commit(message, branch="master", push=False):
    """
    commit the changes in the ays repo to git, can optionally push.
    this is very important because it allows you to see change in ays repo.
    """
    repo = j.atyourservice.get()
    repo.commit(message, branch, push=push)

@click.command()
def restore():
    """
    Use this command when you want to populate the database with the service present on the file system.
    This is usefull when you download an AYS repository from a git and want to start using it locally.
    """
    from JumpScale.baselib.atyourservice81.Service import Service
    repo = j.atyourservice.get()
    for service_path in j.sal.fs.listDirsInDir('{repo}/services'.format(repo=repo.path), recursive=True):
        Service(repo, path=service_path)

@click.command()
@click.option('--id', default=None)
@click.option('--list',default=False, is_flag=True, help='list all run ids')
def run_info(id, list):
    """
    Print info about run, if not specified will be latest run
    """
    repo = j.atyourservice.get()
    if list:
        print("Run IDs:")

        runs = repo.runsList()
        if len(runs) <= 0:
            print("no run in this repo yet")

        for model in sorted(runs, key=lambda r: r.dbobj.lastModDate):
            print('{key} - mod date: {epoch}'.format(key=model.key, epoch=j.data.time.epoch2HRDateTime(model.dbobj.lastModDate)))

        return

    if id is None:
        print("No run id specified")
        return

    run = repo.runGet(id)
    print(run.objectGet())


@click.command()
@click.option('--role', '-r', default="", help='optional role for ays instances execute an action on')
@click.option('--instance', '-i', default="", help='optional name of instance')
def state(role='', instance=''):
    """
    Print the state of the selected services. If not role or instances specified, all services from the repository are selected
    """
    repo = j.atyourservice.get()
    services = repo.servicesFind(name=instance, actor='%s.*' % role)
    services = sorted(services, key=lambda s: s.model.dbobj.actorName)
    for service in services:
        print('State of service : %s!%s' % (service.model.dbobj.actorName, service.model.dbobj.name))
        actionsNames = sorted(service.model.actionsState.keys())
        for actionName in actionsNames:
            print("\t%-25s : %s" % (actionName, service.model.actionsState[actionName]))


@click.command()
@click.option('--role', '-r', default="", help='optional role for ays instances you want to delete')
@click.option('--instance', '-i', default="", help='optional name of instance')
@click.option('--ask', default=True, is_flag=True, help='ask confirmation before delete services')
def delete(role, instance, ask):
    """
    Delete a service and all its children
    Be carefull with this action, there is no come back once a service is deleted.
    """
    repo = j.atyourservice.get()
    services = repo.servicesFind(name=instance, actor='%s.*' % role)
    if len(services) <= 0:
        print('Nothing to be deleted')
        return

    services = sorted(services, key=lambda s: s.model.dbobj.actorName)

    print("Services selected for deletion:")
    for service in services:
        print("- %s" % service)
        print('\nchild that will also be deleted:')
        for child in service.children:
            print('  - %s' % child)

    if ask:
        resp = j.tools.console.askYesNo('\nAre you sure you want to delete ?')
        if resp is False:
            return

    for service in services:
        print('delete %s' % service)
        service.delete()

@click.command()
@click.option('--enable', is_flag=True, default=False)
@click.option('--disable', is_flag=True, default=False)
@click.option('--show', is_flag=True, default=False)
def noexec(enable, disable, show):
    """
    Enable/Disable the no_exec mode.
    Once this mode is enabled, no action will ever be execute.
    But the state of the action will be updated as if everything went fine (state ok)

    This mode can be used for demo or testing
    """
    repo = j.atyourservice.get()

    if show:
        out = 'no-exec mode is '
        out += 'enable' if repo.model.no_exec else "disable"
        print(out)
        return

    ok = j.tools.console.askYesNo("warning ! Changing the noexec mode of your repo required to destroy it first.\nAre you sure you want to continue?")
    if not ok:
        return

    if enable and not disable:
        if not repo.model.no_exec:
            repo.destroy()
            print("enable noexec mode")
            repo.enable_noexec()
        else:
            print("already enabled")
    elif not enable and disable:
        if repo.model.no_exec:
            repo.destroy()
            print("disable noexec mode")
            repo.disable_noexec()
        else:
            print("already disabled")
    else:
        print("can't enable and disable at the same time")
#
# @click.command()
# def disable_noexec():
#     repo = j.atyourservice.get()
#     repo.disable_noexec()



@click.command()
@click.option('--config', '-c', default="", help='path of ays config file')
def start(config):
    """
    Start the AYS daemon
    """
    from JumpScale.baselib.atyourservice81.AtYourServiceDaemon import Server
    if config:
        cfg = j.data.serializer.yaml.load(config)
        if 'redis' not in cfg:
            raise j.exceptions.Input('format of the config file not valid. Missing redis section')

        redis_config = cfg['redis']
        server = Server(redis_config=redis_config)
    else:
        server = Server()
    server.start()

cli.add_command(run)
cli.add_command(create_repo)
cli.add_command(discover)
cli.add_command(repo_list)
cli.add_command(run_info)
cli.add_command(simulate)
cli.add_command(test)
cli.add_command(set_state)
cli.add_command(commit)
cli.add_command(restore)
cli.add_command(blueprint)
cli.add_command(destroy)
cli.add_command(update)
cli.add_command(install)
cli.add_command(do)
cli.add_command(show)
cli.add_command(list)
cli.add_command(state)
cli.add_command(delete)
cli.add_command(noexec)
cli.add_command(start)

if __name__ == '__main__':
    cli()
