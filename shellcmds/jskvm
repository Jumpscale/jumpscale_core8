#!/usr/bin/env jspython
from JumpScale import j
import click

j.application.start("jskvm")

ACTIONS = ('create', 'list', 'list_images', 'init_network', 'list_snapshots', 'info', 'destroy', 'destroy_all', 'start', 'stop', 'restart', 'snapshot', 'delete_snapshot', 'execute')

@click.command()
@click.argument('action', type=click.Choice(ACTIONS))
@click.option('--name', '-n', help='machine name')
@click.option('--base', '-b', help='base to clone from')
@click.option('--replace', '-r', help='will replace the vm if exists', default=True)
@click.option('--mem', '-m', help='max mem in MB', default=512)
@click.option('--size', '-s', help='disk size in GB', default=10)
@click.option('--description', '-d', help='vmachine description')
@click.option('--vcpu', '-p', help='cpu count', default=1)
@click.option('--cmd', '-c', help='cmd to execute')
@click.option('--pubip', '-a', help='set pub ip addr of machine (192.168.1.207/24)', default='')
@click.option('--gw', '-g', help='set ip gateway of machine (192.168.1.1)', default='')
@click.option('--pubiface', '-i', help='public interface', default='eth0')
@click.option('--snapshotname', '-t', help='snapshot name')
@click.option('--sudo', '-u', help='execute with sudo', default=False)
def jskvm(action, name, base, replace, mem, size, description, vcpu, cmd, pubip, gw, pubiface, snapshotname, sudo):
    kvm = j.sal.kvm

    ############create
    if action == 'create':
        if not name:
            raise j.exceptions.RuntimeError("specify machine name")
        if not base:
            raise j.exceptions.RuntimeError("specify image name")
        if base not in kvm.images:
            raise j.exceptions.RuntimeError("image does not exist")
        kvm.create(name, base, replace, description, size, mem, vcpu)

    ##########list
    if action == 'list':
        running, stopped = kvm.list()
        print("## running:")
        for item in running:
            print("  machine: %-25s %s" % (item['name'], kvm.getIp(item['name'])))
        print("## stopped:")
        for item in stopped:
            configpath = j.sal.fs.joinPaths(kvm.vmpath, item['name'])
            if j.sal.fs.exists(path=configpath):
                print("  machine: %-25s" % item['name'])

    ##########init_network
    if action == 'init_network':
        if not pubiface:
            raise j.exceptions.RuntimeError('public iface must be specified')
        kvm.initPhysicalBridges(pubiface)
        kvm.initLibvirtNetwork()
        kvm.initNattingRules()

    ##########list_images
    if action == 'list_images':
        print("## images:")
        for image_name, image_hrd in kvm.images.items():
            print("  image: %-25s %s" % (image_name, image_hrd.get('ostype')))

    ##########list_snapshots
    if action == 'list_snapshots':
        if not name:
            raise j.exceptions.RuntimeError("specify machine name")
        for snapshot in kvm.listSnapshots(name):
            print(snapshot)

    ##########info
    if action == 'info':
        if not name:
            raise j.exceptions.RuntimeError("specify machine name")
        config = kvm.getConfig(name)
        if config:
            print('Name: %s\nBase image: %s\nID: %s\nIP address: %s\nMemory: %s MB\nDisk size: %s GB\n' % (name,
                  config.get('image'), config.get('id'), config.get('bootstrap.ip'),
                  config.get('memory'), config.get('disk_size')))

    ##########execute
    if action == 'execute':
        if not name:
            raise j.exceptions.RuntimeError("specify machine name")
        if not cmd:
            raise j.exceptions.RuntimeError("specify command to execute")
        kvm.execute(name, cmd, sudo)

    ##########snapshot
    if action == 'snapshot':
        if not name:
            raise j.exceptions.RuntimeError("specify machine name")
        if not snapshotname:
            raise j.exceptions.RuntimeError("specify snapshot name")
        kvm.snapshot(name, snapshotname)

    ##########delete_snapshot
    if action == 'delete_snapshot':
        if not name:
            raise j.exceptions.RuntimeError("specify machine name")
        if not snapshotname:
            raise j.exceptions.RuntimeError("specify snapshot name")
        kvm.deleteSnapshot(name, snapshotname)

    # if action =='rdp':
    #     if name==None:
    #         raise j.exceptions.RuntimeError("specify machine name")
    #     if ip=="":
    #         ip=getip(nr)
    #     time.sleep(2)
    #     j.sal.nettools.waitConnectionTest(ip,3389,2)
    #     j.system.installtools.execute("rmachine %s -g 1600x900 -e & 2>&1 > /dev/null"%ip)

    if action == 'destroy_all':
        if j.tools.console.askYesNo('Are you sure you want to destroy all vmachines?'):
            kvm.destroyAll()
        else:
            print('Rolled back')

    if action == 'destroy':
        if not name:
            raise j.exceptions.RuntimeError("specify machine name")
        kvm.destroy(name)

    if action == 'stop':
        if not name:
            raise j.exceptions.RuntimeError("specify machine name")
        kvm.stop(name)

    if action == 'start':
        if not name:
            raise j.exceptions.RuntimeError("specify machine name")
        kvm.start(name)

    if action == 'restart':
        if not name:
            raise j.exceptions.RuntimeError("specify machine name")
        kvm.stop(name)
        kvm.start(name)

jskvm()
j.application.stop()
